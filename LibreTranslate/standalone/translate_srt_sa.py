import argparse
import pysrt
import os
import sys
import requests

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞ LibreTranslate
API_URL = "http://localhost:5000/translate"
SOURCE_LANG = "en"  # –µ–∑–∏–∫ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–Ω–∏—è —Ç–µ–∫—Å—Ç
TARGET_LANG = "bg"  # –µ–∑–∏–∫ –∑–∞ –ø—Ä–µ–≤–æ–¥

APP_VERSION = "1.1.0"

print(f"Running {os.path.basename(__file__)} version {APP_VERSION}")


def translate_text(text,target_lang=TARGET_LANG):
    """
    –ü—Ä–µ–≤–µ–∂–¥–∞ –ø–æ–¥–∞–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç —á—Ä–µ–∑ LibreTranslate API.

    :param text: —Ç–µ–∫—Å—Ç—ä—Ç, –∫–æ–π—Ç–æ —â–µ –±—ä–¥–µ –ø—Ä–µ–≤–µ–¥–µ–Ω.
    :param target_lang: –µ–∑–∏–∫—ä—Ç –Ω–∞ –ø—Ä–µ–≤–æ–¥–∞. –ü–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ –µ "bg".
    :return: –ø—Ä–µ–≤–µ–¥–µ–Ω–∏—è—Ç —Ç–µ–∫—Å—Ç, –∏–ª–∏ –ø–æ–¥–∞–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç, –∞–∫–æ —Å–µ –ø–æ—è–≤–∏ –≥—Ä–µ—à–∫–∞.
    """
    payload = {
        "q": text,
        "source": SOURCE_LANG,
        "target": target_lang,
        "format": "text"
    }
    try:
        response = requests.post(API_URL, json=payload)
        response.raise_for_status()
        data = response.json()
        return data.get("translatedText", text)
    except Exception as e:
        print(f"\n–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø—Ä–µ–≤–æ–¥–∞ –Ω–∞ —Ç–µ–∫—Å—Ç: {e}")
        return text

def translate_srt(input_srt, target_lang=TARGET_LANG):
    """
    –ü—Ä–µ–≤–µ–∂–¥–∞ SRT —Ñ–∞–π–ª, –∏–∑–ø–æ–ª–∑–≤–∞–π–∫–∏ LibreTranslate API.

    :param input_srt: –ü—ä—Ç—è—Ç –¥–æ SRT —Ñ–∞–π–ª–∞, –∫–æ–π—Ç–æ —â–µ –±—ä–¥–µ –ø—Ä–µ–≤–µ–¥–µ–Ω.
    :param target_lang: –ï–∑–∏–∫—ä—Ç –Ω–∞ –ø—Ä–µ–≤–æ–¥–∞. –ü–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ –µ "bg".
    :return: –ùe –≤—Ä—ä—â–∞ —Å—Ç–æ–π–Ω–æ—Å—Ç. –ò–∑—Ö–æ–¥–Ω–∏—è—Ç –ø—Ä–µ–≤–µ–¥–µ–Ω —Ñ–∞–π–ª —Å–µ –∑–∞–ø–∞–∑–≤–∞ –∫–∞—Ç–æ {input_srt}.{target_lang}.srt.
    """
    subs = pysrt.open(input_srt)
    translated_subs = pysrt.SubRipFile()

    total_subs = len(subs)
    for idx, sub in enumerate(subs):
        translated_text = translate_text(sub.text, target_lang)
        new_sub = pysrt.SubRipItem(index=sub.index, start=sub.start, end=sub.end, text=translated_text)
        translated_subs.append(new_sub)

        progress = (idx + 1) / total_subs * 100
        sys.stdout.write(f"\r{input_srt} - {progress:.2f}%")
        sys.stdout.flush()

    output_srt = f"{os.path.splitext(input_srt)[0]}.{target_lang}.srt"
    translated_subs.save(output_srt, encoding='utf-8')
    # print(f"\n‚úÖ Translated: {input_srt} ‚Üí {output_srt}")

def process_directory(directory=os.getcwd(), target_lang=TARGET_LANG):
    print(f"–ü—Ä–æ–≤–µ—Ä—è–≤–∞–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–æ–≤–µ: {directory}")

    if not os.path.exists(directory):
        print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞ {directory} –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–∞!")
        return

    srt_files = [f for f in os.listdir(directory) if f.endswith(".srt")]
    print(f"üìÅ –ù–∞–º–µ—Ä–∏—Ö {len(srt_files)} .srt —Ñ–∞–π–ª–æ–≤–µ –≤ {directory}")

    if not srt_files:
        print("‚ö†Ô∏è –ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ .srt —Ñ–∞–π–ª–æ–≤–µ!")
        return

    for srt_file in srt_files:
        translate_srt(os.path.join(directory, srt_file), target_lang)

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] in ("-h", "--help"):
        print("–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ: python translate_srt.py [--src <–∏–∑—Ç–æ—á–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è>] [--lang <–µ–∑–∏–∫ –∑–∞ –ø—Ä–µ–≤–æ–¥>] [--out <–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞>]")
        print("  --src <–∏–∑—Ç–æ—á–Ω–∏–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è> - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å .srt —Ñ–∞–π–ª–æ–≤–µ")
        print("  --lang <–µ–∑–∏–∫ –∑–∞ –ø—Ä–µ–≤–æ–¥> - –µ–∑–∏–∫—ä—Ç, –Ω–∞ –∫–æ–π—Ç–æ —â–µ —Å–µ –∏–∑–≤—ä—Ä—à–∏ –ø—Ä–µ–≤–æ–¥–∞")
        print("  --out <–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞> - –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞, –≤ –∫–æ—è—Ç–æ —â–µ —Å–µ –∑–∞–ø–∏—à–∞—Ç –ø—Ä–µ–≤–µ–¥–µ–Ω–∏—Ç–µ —Ñ–∞–π–ª–æ–≤–µ")
        sys.exit(0)

    parser = argparse.ArgumentParser()
    parser.add_argument("--src", help="Source directory with .srt files", default=os.getcwd())
    parser.add_argument("--lang", help="Target language for translation", default=TARGET_LANG)
    parser.add_argument("--out", help="Output directory for translated files", default=None)
    args = parser.parse_args()

    if not args.out:
        args.out = os.path.join(args.src, "bg")
    if not os.path.exists(args.out):
        os.makedirs(args.out)

    OUTPUT_FOLDER = args.out
    srs_dir = args.src
    target_lang = args.lang

    process_directory(srs_dir, target_lang)

    print(f"‚úÖ –ü—Ä–µ–≤–æ–¥—ä—Ç –∑–∞–≤—ä—Ä—à–∏ —É—Å–ø–µ—à–Ω–æ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ç–∞: {OUTPUT_FOLDER}")
